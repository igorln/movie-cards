{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/EditMovie.js","pages/MovieDetails.js","pages/NewMovie.js","pages/MovieList.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","Component","MovieForm","props","state","movie","handleSubmit","bind","undefined","this","genre","setState","onSubmit","field","newValue","title","placeholder","id","type","value","onChange","event","updateMovie","target","htmlFor","subtitle","imagePath","storyline","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","to","renderSubmitButton","React","MovieCard","data-testid","src","alt","params","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","deleteMovie","filter","status","EditMovie","shouldRedirect","match","fetchMovie","updatedMovie","map","movieAPI","requestObject","MovieDetails","NewMovie","newMovie","movieData","nextId","length","MovieList","fetchMovies","key","NotFound","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c51c7ac.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <h1 className=\"position-absolute top-50 start-50 translate-middle text-light\">Loading...</h1>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    if ( this.state.genre === undefined ) {\n    this.setState({genre: 'action'})\n    }\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div className=\"form-floating mb-3 width-45\">\n        <input\n          placeholder=\"Insira o título\"\n          id=\"movie_title\"\n          type=\"text\"\n          className=\"form-control\"\n          value={ title }\n          onChange={ (event) => this.updateMovie('title', event.target.value) }\n        />\n        <label htmlFor=\"movie_title\">\n        Title\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div className=\"form-floating mb-3 width-45\">\n        <input\n          placeholder=\"Insira o subtítulo\"\n          id=\"movie_subtitle\"\n          type=\"text\"\n          className=\"form-control\"\n          value={ subtitle }\n          onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n        />\n        <label htmlFor=\"movie_subtitle\">\n          Subtitle\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"form-floating mb-3 width-45\">\n        <input\n          placeholder=\"Insira o caminho da imagem\"\n          id=\"movie_image\"\n          type=\"text\"\n          className=\"form-control\"\n          value={ imagePath }\n          onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n        />\n        <label htmlFor=\"movie_image\">\n          Image path\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div className=\"form-floating mb-3 width-45\">\n          <textarea\n            placeholder=\"storyline\"\n            id=\"movie_storyline\"\n            className=\"form-control\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n        <label htmlFor=\"movie_storyline\">\n          Storyline\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div className=\"form-floating mb-3 width-45\">\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            className=\"form-select\"\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Action</option>\n            <option value=\"comedy\">Comedy</option>\n            <option value=\"thriller\">Thriller</option>\n            <option value=\"fantasy\">Fantasy</option>\n          </select>\n        <label htmlFor=\"movie_genre\">\n          Genre\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div className=\"form-floating mb-3 width-45\">\n        <input\n          placeholder=\"Dê a avaliação do filme\"\n          id=\"movie_rating\"\n          className=\"form-control\"\n          type=\"number\"\n          step={ 0.1 }\n          min={ 0 }\n          max={ 5 }\n          value={ rating }\n          onChange={ (event) => this.updateMovie('rating', event.target.value) }\n        />\n        <label htmlFor=\"movie_rating\">\n          Rating\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n          className=\"btn btn-success p-3\"\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"text-ligh mt-4\">\n        <form className=\"d-flex flex-column align-items-center\">\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          <div className=\"width-45 d-flex justify-content-between\">\n            {this.renderGenreSelection()}\n            {this.renderRatingInput()}\n          </div>\n          <div className=\"width-45 d-flex justify-content-evenly\">\n            <Link className=\"btn btn-primary width-83px p-3\" to=\"/\">BACK</Link>\n            {this.renderSubmitButton()}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.arrayOf(PropTypes.object),\n  onSubmit: PropTypes.func,\n}.isRequired;\n\nexport default MovieForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img className=\"movie-card-image height-max-167\" src={ movie.imagePath } alt={ `Banner of ${movie.title}` } />\n        <div className=\"movie-card-body\">\n          <p className=\"movie-card-title\">{ movie.title }</p>\n          <p className=\"movie-card-storyline\">{ movie.storyline }</p>\n          <Link to={ `/movies/${movie.id}` } params={ movie.id }>SEE DETAILS</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: '/images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: '/images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: '/images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: '/images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: '/images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Redirect } from 'react-router-dom';\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'loading',\n      shouldRedirect: false,\n      movie: [],\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { match: { params } } = this.props;\n    this.fetchMovie(params.id);\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie);\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  async fetchMovie(id) {\n    const requestObject = await movieAPI.getMovie(id);\n    this.setState({\n      movie: requestObject,\n      status: 'done',\n    });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  id: PropTypes.number,\n}.isRequired;\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movie: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { match: { params } } = this.props;\n    this.fetchMovie(params.id);\n  }\n\n  async fetchMovie(id) {\n    const requestObject = await movieAPI.getMovie(id);\n    this.setState({\n      movie: requestObject,\n    });\n  }\n\n  async deleteMovie(id) {\n    await movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    const { movie } = this.state;\n    if (movie === undefined) { return <Loading />; }\n    return (\n      <div className=\"text-light\" data-testid=\"movie-details\">\n        <div className=\"d-flex justify-content-around mt-4\">\n          <img className=\"border border-warning border-5 rounded width-45 height-max-367\" alt=\"Movie Cover\" src={ movie.imagePath }/>\n          <div className=\"text-center width-45 border border-warning align-self-center\">\n            <p>{ `Title: ${movie.title}` }</p>\n            <p>{ `Subtitle: ${movie.subtitle}` }</p>\n            <p className=\"\">{ `Storyline: ${movie.storyline}` }</p>\n            <p>{ `Genre: ${movie.genre}` }</p>\n            <p className=\"\">{ `Rating: ${movie.rating}` }</p>\n          </div>\n        </div>\n        <div className=\"d-flex justify-content-evenly m-5\">\n          <Link className=\"btn btn-primary width-83px\" to=\"/\">BACK</Link>\n          <Link className=\"btn btn-secondary width-83px\" to={ `/movies/${movie.id}/edit` }>EDIT</Link>\n          <Link className=\"btn btn-danger width-83px\" to=\"/\" onClick={ () => this.deleteMovie(movie.id) }>DELETE</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  id: PropTypes.number,\n}.isRequired;\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      shouldRedirect: false,\n    };\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport MovieCard from '../components/MovieCard';\nimport { Loading } from '../components';\nimport { Link } from 'react-router-dom';\n\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  async fetchMovies() {\n    const requestObject = await movieAPI.getMovies();\n    this.setState({\n      movies: requestObject,\n    });\n  }\n\n  render() {\n    const { movies } = this.state;\n\n\n    return (\n      <>\n        <Link className=\"btn btn-warning mt-4 right\" to=\"/movies/new\">ADD CARD</Link>\n        <div className=\"movie-list\" data-testid=\"movie-list\">\n          { movies.length === 0 ? <Loading />\n            : movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport EditMovie from './pages/EditMovie';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport MovieList from './pages/MovieList';\nimport NotFound from './pages/NotFound';\nimport './bootstrap.css';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"movie-card-header\"><p className=\"bg-warning pe-4 ps-4 rounded fw-bold fs-1\">Movie Cards</p></div>\n      <Switch>\n        <Route path=\"/movies/:id/edit\" component={ EditMovie } />\n        <Route path=\"/movies/new\" component={ NewMovie } />\n        <Route path=\"/movies/:id\" component={ MovieDetails } />\n        <Route path=\"/\" exact component={ MovieList } />\n        <Route component={ NotFound } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}